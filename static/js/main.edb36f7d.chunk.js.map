{"version":3,"sources":["util/convertToIcal.ts","components/callToAction/index.tsx","components/exportDialog/index.tsx","components/footer/index.tsx","components/importDialog/index.tsx","components/table/index.tsx","components/layout/index.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["generate","events","host","regexIsoDate","formatDate","d","replace","s","appendAttribute","forEach","i","date","done","id","title","Date","now","toISOString","startDate","setHours","dueDate","attr","data","useStyles","makeStyles","theme","heroButtons","marginTop","spacing","CallToAction","props","classes","Fragment","Typography","component","variant","align","color","gutterBottom","primaryText","paragraph","secondaryText","className","Grid","container","justify","item","mainButton","secondaryButton","ExportDialog","handleClose","handleConfirm","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","footer","backgroundColor","palette","background","paper","padding","Footer","ImportDialog","useState","textFieldValue","setTextFieldValue","TextField","multiline","rows","fullWidth","rowsMax","value","onChange","e","target","Table","size","TableHead","headers","map","header","TableCell","TableBody","row","key","Intl","DateTimeFormat","format","Checkbox","checked","updatedRows","handleCheck","icon","marginRight","heroContent","Layout","React","setData","exportDialogOpen","setExportDialogOpen","importDialogOpen","setImportDialogOpen","CssBaseline","AppBar","position","Toolbar","noWrap","Container","maxWidth","formatted","convertToIcal","file","File","type","el","document","createElement","href","URL","createObjectURL","download","name","click","revokeObjectURL","json","JSON","parse","console","log","jsonToTableRows","Data","entry","Status","Id","Title","Description","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edb36f7d.chunk.js","sourcesContent":["import { TableRow } from \"../components/table/types\";\r\n\r\nexport const convertToIcal = (data: TableRow[]) => {\r\n    const stringify = generate(data);\r\n    return stringify;\r\n}\r\n\r\nconst generate = (events: TableRow[]) => {\r\n    const host = 'doddydigitaldesign.github.io';\r\n    const regexIsoDate = /([:]|[-]|[.][\\d]{3}|[Z])/g;\r\n    const formatDate = (d: string) => d.replace(regexIsoDate, '');\r\n    let s = '';\r\n    if (events) {\r\n        // Begin calendar\r\n        s += appendAttribute('BEGIN', 'VCALENDAR');\r\n        s += appendAttribute('VERSION', '2.0');\r\n        s += appendAttribute('PRODID', '//' + host + '//ddd-business-assistant');\r\n        s += appendAttribute('CALSCALE', 'GREGORIAN');\r\n        s += appendAttribute('METHOD', 'PUBLISH');\r\n        // Add events to calendar\r\n        events.forEach(({ date, done, id, title }, i) => {\r\n            s += appendAttribute('BEGIN', 'VTODO')\r\n            s += 'X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\\n';\r\n            s += appendAttribute('UID', id + '@' + host);\r\n            s += appendAttribute('SEQUENCE', '' + i);\r\n            s += appendAttribute('STATUS', done ? 'COMPLETED' : 'NEEDS-ACTION');\r\n            s += appendAttribute('DTSTAMP', formatDate(new Date(Date.now()).toISOString()));\r\n            const startDate = formatDate(new Date(new Date(date).setHours(0)).toISOString());\r\n            s += appendAttribute('DTSTART', startDate);\r\n            const dueDate = formatDate(new Date(new Date(date).setHours(23)).toISOString());\r\n            s += appendAttribute('DUE', dueDate);\r\n            s += appendAttribute('SUMMARY', title);\r\n            s += appendAttribute('CLASS', 'CONFIDENTIAL');\r\n            s += appendAttribute('CATEGORIES', 'BUSINESS,FINANCE,ACCOUNTING');\r\n            s += appendAttribute('PRIORITY', '1');\r\n            s += appendAttribute('END', 'VTODO');\r\n        })\r\n        s += appendAttribute('END', 'VCALENDAR');\r\n    }\r\n    return s;\r\n}\r\n\r\nconst appendAttribute = (attr: string, data: string) => attr + ':' + data + '\\r\\n';\r\n\r\n","import { Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  primaryText: JSX.Element;\r\n  secondaryText: JSX.Element;\r\n  mainButton: JSX.Element;\r\n  secondaryButton: JSX.Element;\r\n}\r\n\r\nexport const CallToAction = (props: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <Typography\r\n        component=\"h1\"\r\n        variant=\"h2\"\r\n        align=\"center\"\r\n        color=\"textPrimary\"\r\n        gutterBottom\r\n      >\r\n        {props.primaryText}\r\n      </Typography>\r\n      <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n        {props.secondaryText}\r\n      </Typography>\r\n      <div className={classes.heroButtons}>\r\n        <Grid container spacing={2} justify=\"center\">\r\n          <Grid item>{props.mainButton}</Grid>\r\n          <Grid item>{props.secondaryButton ?? null}</Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  handleClose: (arg?: any) => void;\r\n  handleConfirm: (arg?: any) => void;\r\n}\r\n\r\nexport const ExportDialog = (props: Props) => {\r\n  const { handleClose, handleConfirm, open } = props;\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Är du säker på att du vill exportera listan?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Avbryt\r\n          </Button>\r\n          <Button onClick={handleConfirm} color=\"primary\" autoFocus>\r\n            Exportera\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n","import { makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\nexport const Footer = (props: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n        Business Assistant\r\n      </Typography>\r\n      <Typography\r\n        variant=\"subtitle1\"\r\n        align=\"center\"\r\n        color=\"textSecondary\"\r\n        component=\"p\"\r\n      >\r\n        An open source program to help small business owners in Sweden with\r\n        keeping track of important dates.\r\n      </Typography>\r\n    </footer>\r\n  );\r\n};\r\n","import { TextField } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport React, { useState } from \"react\";\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  handleClose: (arg?: any) => void;\r\n  handleConfirm: (arg: string) => void;\r\n}\r\n\r\nexport const ImportDialog = (props: Props) => {\r\n  const { handleClose, handleConfirm, open } = props;\r\n  const [textFieldValue, setTextFieldValue] = useState(\"\");\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Importera från Bokio\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Kopiera ditt bolags \"Viktiga datum\" från Bokio och klistra in i\r\n            rutan.\r\n          </DialogContentText>\r\n          <TextField\r\n            id=\"bokio-todos\"\r\n            multiline\r\n            variant=\"outlined\"\r\n            rows={10}\r\n            fullWidth\r\n            rowsMax={10}\r\n            value={textFieldValue}\r\n            onChange={(e) => {\r\n              setTextFieldValue(e.target.value);\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Avbryt\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              handleConfirm(textFieldValue);\r\n            }}\r\n            color=\"primary\"\r\n            autoFocus\r\n          >\r\n            Importera\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n","import { Checkbox } from \"@material-ui/core\";\r\nimport MuiTable from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport MuiTableRow from \"@material-ui/core/TableRow\";\r\nimport React from \"react\";\r\nimport { TableHeader, TableRow } from \"./types\";\r\n\r\ninterface Props {\r\n  rows: TableRow[] | null;\r\n  headers: TableHeader;\r\n  handleCheck: (e: TableRow[]) => void;\r\n}\r\n\r\nexport const Table = (props: Props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <MuiTable size=\"small\">\r\n        <TableHead>\r\n          <MuiTableRow>\r\n            {props.headers &&\r\n              props.headers.map((header) => <TableCell>{header}</TableCell>)}\r\n          </MuiTableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {props.rows &&\r\n            props.rows.map((row, i) => (\r\n              <MuiTableRow key={row.id}>\r\n                <TableCell>\r\n                  {new Intl.DateTimeFormat(\"sv-SE\").format(new Date(row.date))}\r\n                </TableCell>\r\n                <TableCell>{row.title}</TableCell>\r\n                <TableCell>\r\n                  <Checkbox\r\n                    checked={row.done}\r\n                    onChange={(e, checked) => {\r\n                      const updatedRows = props.rows ? [...props.rows] : [];\r\n                      updatedRows[i].done = checked;\r\n                      props.handleCheck(updatedRows);\r\n                    }}\r\n                  />\r\n                </TableCell>\r\n              </MuiTableRow>\r\n            ))}\r\n        </TableBody>\r\n      </MuiTable>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  AppBar,\r\n  Button,\r\n  Container,\r\n  CssBaseline,\r\n  makeStyles,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport CameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport React from \"react\";\r\nimport { convertToIcal } from \"../../util/convertToIcal\";\r\nimport { CallToAction } from \"../callToAction\";\r\nimport { ExportDialog } from \"../exportDialog\";\r\nimport { Footer } from \"../footer\";\r\nimport { ImportDialog } from \"../importDialog\";\r\nimport { ImportedJson } from \"../importDialog/types\";\r\nimport { Table } from \"../table\";\r\nimport { TableRow } from \"../table/types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n}));\r\n\r\nexport const Layout = () => {\r\n  const classes = useStyles();\r\n\r\n  const [data, setData] = React.useState<TableRow[] | null>(null);\r\n\r\n  const handleCheck = (e: TableRow[]) => {\r\n    setData(e);\r\n  };\r\n\r\n  const [exportDialogOpen, setExportDialogOpen] = React.useState(false);\r\n  const [importDialogOpen, setImportDialogOpen] = React.useState(false);\r\n\r\n  const handleClickExport = () => {\r\n    setExportDialogOpen(true);\r\n  };\r\n\r\n  const handleClickImport = () => {\r\n    setImportDialogOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setExportDialogOpen(false);\r\n    setImportDialogOpen(false);\r\n  };\r\n\r\n  const handleConfirmExport = () => {\r\n    if (data) {\r\n      const formatted = convertToIcal(data);\r\n      const file = new File([formatted], \"export.csv\", { type: \"utf8\" });\r\n      const el = document.createElement(\"a\");\r\n      el.href = URL.createObjectURL(file);\r\n      el.download = file.name;\r\n      el.click();\r\n      URL.revokeObjectURL(el.href);\r\n    }\r\n  };\r\n\r\n  const handleConfirmImport = (e: string): void => {\r\n    const json: ImportedJson = JSON.parse(e);\r\n    console.log(\"import confirmed:\", json);\r\n    const jsonToTableRows = json.Data.map((entry) => {\r\n      const tableRow: TableRow = {\r\n        date: entry.Date,\r\n        done: entry.Status === \"Completed\",\r\n        id: entry.Id,\r\n        title: entry.Title + \": \" + entry.Description,\r\n      };\r\n      return tableRow;\r\n    });\r\n    setData(jsonToTableRows);\r\n    setImportDialogOpen(false);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <CameraIcon className={classes.icon} />\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Business Assistant\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <CallToAction\r\n              mainButton={\r\n                <Button\r\n                  onClick={handleClickExport}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Exportera\r\n                </Button>\r\n              }\r\n              secondaryButton={\r\n                <Button\r\n                  onClick={handleClickImport}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                >\r\n                  Importera\r\n                </Button>\r\n              }\r\n              primaryText={<>Att göra</>}\r\n              secondaryText={\r\n                <>\r\n                  Börja med att importera listan för ditt företag från Bokio.se.\r\n                  <br />\r\n                  <br />\r\n                  Arbeta dig ned genom listan och bocka av raderna. När du\r\n                  känner dig klar för dagen så kan du exportera listan till en\r\n                  fil som du sedan kan importera till din kalender för att få\r\n                  påminnelser när datumen börjar närma sig.\r\n                </>\r\n              }\r\n            />\r\n          </Container>\r\n          <Table\r\n            handleCheck={handleCheck}\r\n            headers={[\"Datum\", \"Titel\", \"Klar\"]}\r\n            rows={data}\r\n          />\r\n        </div>\r\n      </main>\r\n      <Footer />\r\n      <ExportDialog\r\n        open={exportDialogOpen}\r\n        handleConfirm={handleConfirmExport}\r\n        handleClose={handleClose}\r\n      />\r\n      <ImportDialog\r\n        handleClose={handleClose}\r\n        handleConfirm={handleConfirmImport}\r\n        open={importDialogOpen}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Layout } from \"../components/layout\";\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}